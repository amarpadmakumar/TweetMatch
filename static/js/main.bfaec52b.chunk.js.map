{"version":3,"sources":["Button.js","Buttons.js","Question.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","submitted","correct","className","text","selected","onClick","click","Buttons","state","options","ans","num","sel","this","i","length","setState","upd","findAns","React","Component","Question","id","tweet","inc","answer","App","title","right","sidebar","num_questions","updateSelected","bind","add_lists","push","q_num","pos","temp","fetch","then","response","json","data","questions","items","key","href","console","log","sub","x","map","question","index","display_question","cor","inc_right","score","cur","scores","total_score","makeFinalSidebar","display_questions","makeSidebar","submit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfaec52b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default function Button(props) {\n    if (!props.submitted) {\n        return (\n            <button className={props.selected ? 'option-selected' : 'option'} onClick = {() => props.click()}>@{props.text}</button>\n        )\n    }\n    else {\n        if (props.correct) {\n            return (\n                <button className = 'option-correct'>@{props.text}</button>\n            )\n        } \n        else if (props.selected && !props.correct) {\n            return (\n                <button className = 'option-wrong'>@{props.text}</button>\n            )\n        }\n        else {\n            return (\n                <button className = 'option'>@{props.text}</button>\n            )\n        }\n\n    }\n}","import React from 'react';\nimport './App.css';\nimport Button from './Button'\n\nexport default class Buttons extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: [false,false,false,false],\n            options: props.options,\n            ans: props.ans,\n            correct: props.correct,\n            submitted: props.submitted\n        }\n    }\n    \n    click(num) {\n        let sel = [...this.state.selected]\n        for (let i = 0; i < sel.length; i++) {\n            sel[i] = i===num ? !sel[i] : false; \n          }\n        this.setState({selected: sel});\n        if (sel[num]) {\n            this.props.upd(this.props.num, num)\n        }\n        else {\n            this.props.upd(this.props.num, null)\n        }\n    }\n\n    shouldComponentUpdate() {\n        return !this.props.submitted\n    }\n\n    findAns() {\n        for (let i = 0; i < this.state.options.length; i++) {\n            if (this.state.selected[i] && this.state.correct[i]) {\n                return <p className = 'display-correct'>CORRECT</p>\n            }\n            else if (this.state.selected[i] && !this.state.correct[i]) {\n                return <p className = 'display-wrong'>INCORRECT</p>\n            }\n        }\n        return <p className = 'display-wrong'>YOU DID NOT SUBMIT AN ANSWER</p>\n    }\n\n    render() {\n        if (!this.props.submitted) {\n            return (\n                <div className = 'options'>\n                    <Button text= {this.state.options[0]} selected = {this.state.selected[0]} click = {() => this.click(0)} submitted = {this.props.submitted}></Button>\n                    <Button text= {this.state.options[1]} selected = {this.state.selected[1]} click = {() => this.click(1)} submitted = {this.props.submitted}></Button>\n                    <Button text= {this.state.options[2]} selected = {this.state.selected[2]} click = {() => this.click(2)} submitted = {this.props.submitted}></Button>\n                    <Button text= {this.state.options[3]} selected = {this.state.selected[3]} click = {() => this.click(3)} submitted = {this.props.submitted}></Button>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <div className = 'options'>\n                        <Button text= {this.state.options[0]} selected = {this.state.selected[0]} correct = {this.props.correct[0]} submitted = {this.props.submitted}></Button>\n                        <Button text= {this.state.options[1]} selected = {this.state.selected[1]} correct = {this.props.correct[1]} submitted = {this.props.submitted}></Button>\n                        <Button text= {this.state.options[2]} selected = {this.state.selected[2]} correct = {this.props.correct[2]} submitted = {this.props.submitted}></Button>\n                        <Button text= {this.state.options[3]} selected = {this.state.selected[3]} correct = {this.props.correct[3]} submitted = {this.props.submitted}></Button>\n                    </div>\n                    <div>{this.findAns()}</div>\n                </div>\n            )\n        }\n    }\n\n}\n\n","import React from 'react';\nimport './App.css';\nimport Buttons from './Buttons'\n\nexport default function Question(props) {\n    return (\n        <div id={props.num+1} className='stack'>\n            <header className = 'q-header'>\n                Question {props.num+1}\n            </header>\n            <div className = 'question'>\n                <div className='tweet'>\n                {props.tweet}\n                </div>\n                <Buttons upd = {props.upd} num = {props.num} inc = {props.inc} options = {props.options} ans = {props.answer} submitted = {props.submitted} correct = {props.correct}></Buttons>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Question from './Question'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: 'TweetMatch',\n      submitted: false,\n      right: 0,\n      sidebar: [],\n      num_questions: 10,\n      selected: []\n    } \n    this.updateSelected = this.updateSelected.bind(this);\n    this.add_lists()\n  }\n\n  add_lists() {\n    for (let i = 0; i < this.state.num_questions; i++) {\n      this.state.sidebar.push(false)\n      this.state.selected.push(null)\n    }\n  }\n\n  updateSelected(q_num, pos) {\n    let temp = [...this.state.selected]  \n    temp[q_num] = pos\n    this.setState({selected:temp})\n  }\n  componentDidMount() {\n    fetch('http://127.0.0.1:5000/tweets').then(response => response.json()).then(data => this.setState({questions:data}));\n  }\n\n  submit() {\n    this.setState({submitted: true})\n  }\n\n  makeSidebar() {\n    let items = []\n    for (let i = 1; i < this.state.num_questions+1; i++) {\n      items.push(<li key= {i}><a href={`#${i}`} className = 'blackq'>Question {i}</a></li>)\n    }\n    return items\n  }\n\n  makeFinalSidebar(ans) {\n    console.log(ans)\n    let items = []\n    for (let i = 1; i < this.state.num_questions+1; i++) {\n      if (ans[i-1]) {\n        items.push(<li key= {i}><a href={`#${i}`} className = 'greenq'>Question {i}</a></li>)\n      }\n      else {\n        items.push(<li key= {i}><a href={`#${i}`} className = 'redq'>Question {i}</a></li>)\n      }\n    }\n    return items\n  }\n\n  display_questions(sub) {\n    let x = []\n    for (let i=0; i<this.state.num_questions; i++) {\n      x.push(this.state.questions[i])\n    }\n    return x.map((question, index) => this.display_question(question, index, sub))\n  }\n  \n  display_question(question, num,sub) {\n    var answer = question.answer\n    var options = question.options\n    var tweet = question.tweet\n    var cor = []\n    for (let i = 0; i < options.length; i++)\n    {\n      cor.push(options[i]===answer)\n    }\n    return (\n      <Question upd = {this.updateSelected} key = {num} tweet = {tweet} options = {options} answer = {answer} num={num} submitted={sub} correct = {cor} inc  = {this.inc_right}></Question>\n    )\n  }\n\n  total_score() {\n    let score = 0\n    let ans = []\n      for (let i=0; i < this.state.num_questions; i++) {\n        let sel = this.state.selected[i];\n        let cur = this.state.questions[i];\n\n        if (sel != null && cur.options[sel] === cur.answer ) {\n          score++;\n          ans.push(true)\n        }\n        else {\n          ans.push(false)\n        }\n      }\n    return [score, ans]\n  }\n  \n  render() {\n    if (!this.state.submitted) {\n      return (\n            <div className = 'App-body'>\n              <header className = 'App-header'>\n                  {this.state.title}\n              </header>\n              <ul className='sidebar'>\n                  {this.makeSidebar()}\n                  <button className='submit' onClick = {() => this.submit()}> submit answers</button>\n              </ul>              \n              {this.state.questions && this.display_questions(false)}\n            </div>\n      );\n    }\n    else {\n      let scores = this.total_score()\n      return (\n        <div className = 'App-body'>\n          <header className = 'App-header'>\n              {this.state.title}\n          </header>\n          <ul className='sidebar'>\n              <div className = 'score'>{scores[0]}/10</div>\n              {this.makeFinalSidebar(scores[1])}\n          </ul>\n          {this.state.questions && this.display_questions(this.state.questions, true)}\n          {/* {x} */}\n        </div>\n        \n\n      )\n    }\n  }\n}\n\n// function display_questions(questions, sub) {\n//   return questions.map((question, index) => display_question(question, index,sub))\n// }\n\n// function display_question(question, num,sub) {\n//   var answer = question.answer\n//   var options = question.options\n//   var tweet = question.tweet\n//   var cor = []\n//   for (let i = 0; i < options.length; i++)\n//   {\n//     cor.push(options[i]===answer)\n//   }\n//   return (\n//     <Question tweet = {tweet} options = {options} answer = {answer} num={num} submitted={sub} correct = {cor} inc  = {() => this.inc_right}></Question>\n//   )\n// }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}